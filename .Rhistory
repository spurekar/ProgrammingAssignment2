find.packages("devtools")
install.packages("devtools")
find.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
swirl()
library("swirl")
swirl()
5=7
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
nxt()
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
library("swirl")
swirl()
1:20
pi:10
51:1
15:1
?`:`
seq(1,20)
seq(0,10 by=0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
numvect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Smita")
my_name <- c(my_char, "Smita")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world", sep=" ")
paste("Hello", "world!", sep=" ")
paste("X","Y","Z", sep="")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep"-")
paste(LETTERS,1:4,sep="-")
info
info()
main()
bye()
swirl()
exit
exit()
bye(0)
bye()
exit
exit
quit
swirl()
library("swirl")
swirl()
main()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y >0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar,"norf)
names(vect2) <- c("foo","bar,"norf"")
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector = [1:20]
my_vector = c([1:20])
my_vector = 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
names <- c("patient","age", "weight", "bp", "rating", "test")
cnames <- c("patient","age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(cnames,my_data)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
0
source('~/MOOCS/RProgramming/corr.R')
corr(specdata)
getwd()
setwd("~/MOOCS/RProgramming")
getwd()
corr(specdata)
corr("specdata")
corr("specdata")
source('~/MOOCS/RProgramming/corr.R')
corr("specdata")
list.files()
complete("specdata")
source('~/MOOCS/RProgramming/complete.R')
corr("specdata")
corr("specdata",500)
debugSource('~/MOOCS/RProgramming/corr.R')
corr("specdata",500)
source('~/MOOCS/RProgramming/corr.R')
?rep
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector(5)
makeVector(getmean)
makeVector(c(4,5))
makeVector.set(c(4,5))
makeVector(5)
makeVector(5)
set(5)
makeVector(5)
set(5)
makeVector.set(5)
makeVector$set(5)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x$set(5)
x$getmean()
makeVector(5)
makeVector(5)
x$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(5,6,7))
x$getmean()
data <- x$get()
vect <- makeVector(c(5,6,7))
vect$get()
x = [1:9,3,3]
x = [1:3],[1:3]
x = [1:3]
x = 1:3
y = 5:9
x,y
x = matrix(1:9, nrow=3, ncol=3)
x
y <- solve(x)
x = matrix(1:6, nrow=2, ncol=3)
y <- solve(x)
x = matrix(c(4,5,6,7,8,3,4,6,2), nrow=3, ncol=3)
x
y <- solve(x)
y
iden <- x*y
iden
x*y
x%%y
y <- Inv(x)
A = matrix(c(4,5,6,8,3,5,9,3,5), nrows=3)
A = matrix(c(4,5,6,8,3,5,9,3,5), nrow=3)
A
A = matrix(c(4,5,6,8,3,5,9,3,5), nrow=2,ncol=2)
A = matrix(c(4,5,6,8,3,5,9,3,5), nrow=3)
A
det(A)
?invese
?inverse
?matrix
solve(A)
B <- solve(A)
A%%B
A%*%B
A*B
clear
?gl
setwd("~/GitHub/ProgrammingAssignment2")
A <- matrix(c(3,4,5,6,8,1,2,8,4),nrow=3,ncol=3)
A
B <- solve(A)
B
A*B
A%*%B
A <- matrix(c(3,4,5,6,8,1),nrow=3)
A
det(A)
solve(A)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
A <- matrix(c(3,4,5,6,8,1,2,8,4),nrow=3,ncol=3)
A
mat <- makeCacheMatrix(A)
mat$get()
mat$getInverse()
mat$setInverse(56)
mat$getInverse()
B <- matrix(c(3,4,8,6,8,4,7,8,4),nrow=3,ncol=3)
B
mat$set(B)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
mat$set(B)
mat$set(B)
mat$set(B)
mat$getInverse()
mat$getInverse()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
A
mat <- makeCacheMatrix(A)
mat$get()
mat$getInverse()
cacheSolve(A)
cacheSolve(mat)
cacheSolve(mat)
B <- cacheSolve(mat)
A %*% B
